/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.3
// source: dms.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./dms_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DocumentManagementServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.DocumentManagementServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.UserLogInRequest,
 *   !proto.UserLogInResponse>}
 */
const methodDescriptor_DocumentManagementService_LogInUser = new grpc.web.MethodDescriptor(
  '/DocumentManagementService/LogInUser',
  grpc.web.MethodType.UNARY,
  proto.UserLogInRequest,
  proto.UserLogInResponse,
  /**
   * @param {!proto.UserLogInRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.UserLogInResponse.deserializeBinary
);


/**
 * @param {!proto.UserLogInRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.UserLogInResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.UserLogInResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DocumentManagementServiceClient.prototype.logInUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DocumentManagementService/LogInUser',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_LogInUser,
      callback);
};


/**
 * @param {!proto.UserLogInRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.UserLogInResponse>}
 *     Promise that resolves to the response
 */
proto.DocumentManagementServicePromiseClient.prototype.logInUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DocumentManagementService/LogInUser',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_LogInUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetDirectoryContentsRequest,
 *   !proto.GetDirectoryContentsResponse>}
 */
const methodDescriptor_DocumentManagementService_GetDirectoryContents = new grpc.web.MethodDescriptor(
  '/DocumentManagementService/GetDirectoryContents',
  grpc.web.MethodType.UNARY,
  proto.GetDirectoryContentsRequest,
  proto.GetDirectoryContentsResponse,
  /**
   * @param {!proto.GetDirectoryContentsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetDirectoryContentsResponse.deserializeBinary
);


/**
 * @param {!proto.GetDirectoryContentsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetDirectoryContentsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetDirectoryContentsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DocumentManagementServiceClient.prototype.getDirectoryContents =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DocumentManagementService/GetDirectoryContents',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_GetDirectoryContents,
      callback);
};


/**
 * @param {!proto.GetDirectoryContentsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetDirectoryContentsResponse>}
 *     Promise that resolves to the response
 */
proto.DocumentManagementServicePromiseClient.prototype.getDirectoryContents =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DocumentManagementService/GetDirectoryContents',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_GetDirectoryContents);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GetFileContentsRequest,
 *   !proto.GetFileContentsResponse>}
 */
const methodDescriptor_DocumentManagementService_GetFileContents = new grpc.web.MethodDescriptor(
  '/DocumentManagementService/GetFileContents',
  grpc.web.MethodType.UNARY,
  proto.GetFileContentsRequest,
  proto.GetFileContentsResponse,
  /**
   * @param {!proto.GetFileContentsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.GetFileContentsResponse.deserializeBinary
);


/**
 * @param {!proto.GetFileContentsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.GetFileContentsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.GetFileContentsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DocumentManagementServiceClient.prototype.getFileContents =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DocumentManagementService/GetFileContents',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_GetFileContents,
      callback);
};


/**
 * @param {!proto.GetFileContentsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.GetFileContentsResponse>}
 *     Promise that resolves to the response
 */
proto.DocumentManagementServicePromiseClient.prototype.getFileContents =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DocumentManagementService/GetFileContents',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_GetFileContents);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MoveFileOrDirectoryRequest,
 *   !proto.MoveFileOrDirectoryResponse>}
 */
const methodDescriptor_DocumentManagementService_MoveFileOrDirectory = new grpc.web.MethodDescriptor(
  '/DocumentManagementService/MoveFileOrDirectory',
  grpc.web.MethodType.UNARY,
  proto.MoveFileOrDirectoryRequest,
  proto.MoveFileOrDirectoryResponse,
  /**
   * @param {!proto.MoveFileOrDirectoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MoveFileOrDirectoryResponse.deserializeBinary
);


/**
 * @param {!proto.MoveFileOrDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MoveFileOrDirectoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MoveFileOrDirectoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DocumentManagementServiceClient.prototype.moveFileOrDirectory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DocumentManagementService/MoveFileOrDirectory',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_MoveFileOrDirectory,
      callback);
};


/**
 * @param {!proto.MoveFileOrDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MoveFileOrDirectoryResponse>}
 *     Promise that resolves to the response
 */
proto.DocumentManagementServicePromiseClient.prototype.moveFileOrDirectory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DocumentManagementService/MoveFileOrDirectory',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_MoveFileOrDirectory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CreateFileRequest,
 *   !proto.CreateFileResponse>}
 */
const methodDescriptor_DocumentManagementService_CreateFile = new grpc.web.MethodDescriptor(
  '/DocumentManagementService/CreateFile',
  grpc.web.MethodType.UNARY,
  proto.CreateFileRequest,
  proto.CreateFileResponse,
  /**
   * @param {!proto.CreateFileRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.CreateFileResponse.deserializeBinary
);


/**
 * @param {!proto.CreateFileRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.CreateFileResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.CreateFileResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DocumentManagementServiceClient.prototype.createFile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DocumentManagementService/CreateFile',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_CreateFile,
      callback);
};


/**
 * @param {!proto.CreateFileRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.CreateFileResponse>}
 *     Promise that resolves to the response
 */
proto.DocumentManagementServicePromiseClient.prototype.createFile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DocumentManagementService/CreateFile',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_CreateFile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.CreateDirectoryRequest,
 *   !proto.CreateDirectoryResponse>}
 */
const methodDescriptor_DocumentManagementService_CreateDirectory = new grpc.web.MethodDescriptor(
  '/DocumentManagementService/CreateDirectory',
  grpc.web.MethodType.UNARY,
  proto.CreateDirectoryRequest,
  proto.CreateDirectoryResponse,
  /**
   * @param {!proto.CreateDirectoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.CreateDirectoryResponse.deserializeBinary
);


/**
 * @param {!proto.CreateDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.CreateDirectoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.CreateDirectoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.DocumentManagementServiceClient.prototype.createDirectory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/DocumentManagementService/CreateDirectory',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_CreateDirectory,
      callback);
};


/**
 * @param {!proto.CreateDirectoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.CreateDirectoryResponse>}
 *     Promise that resolves to the response
 */
proto.DocumentManagementServicePromiseClient.prototype.createDirectory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/DocumentManagementService/CreateDirectory',
      request,
      metadata || {},
      methodDescriptor_DocumentManagementService_CreateDirectory);
};


module.exports = proto;

